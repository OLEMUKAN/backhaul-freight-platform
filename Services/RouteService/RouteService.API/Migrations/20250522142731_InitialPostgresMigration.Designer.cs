// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RouteService.API.Data;

#nullable disable

namespace RouteService.API.Migrations
{
    [DbContext(typeof(RouteDbContext))]
    [Migration("20250522142731_InitialPostgresMigration")]
    partial class InitialPostgresMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RouteService.API.Models.ProcessedEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EventId");

                    b.ToTable("ProcessedEvents");
                });

            modelBuilder.Entity("RouteService.API.Models.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("AvailableFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("AvailableTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CapacityAvailableKg")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("CapacityAvailableM3")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Point>("DestinationPoint")
                        .IsRequired()
                        .HasColumnType("geometry(Point, 4326)");

                    b.Property<decimal>("EstimatedDistanceKm")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<LineString>("GeometryPath")
                        .HasColumnType("geometry(LineString, 4326)");

                    b.Property<bool>("IsReturnLeg")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Point>("OriginPoint")
                        .IsRequired()
                        .HasColumnType("geometry(Point, 4326)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCapacityKg")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("TotalCapacityM3")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ViaPoints")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DestinationPoint");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DestinationPoint"), "GIST");

                    b.HasIndex("IsReturnLeg");

                    b.HasIndex("OriginPoint");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OriginPoint"), "GIST");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TruckId");

                    b.ToTable("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
